services:
  # Frontend Service
  - type: web
    name: cn334-frontend
    env: node
    buildCommand: cd app_frontend && npm install && npm run build
    startCommand: cd app_frontend && npm start
    envVars:
      - key: NODE_ENV
        value: production
      - key: NEXT_PUBLIC_API_URL
        value: https://cn334-backend.onrender.com

  # User Service
  - type: web
    name: cn334-user-service
    env: docker
    dockerfilePath: ./user_service/Dockerfile
    envVars:
      - key: NODE_ENV
        value: production
      - key: PORT
        value: 3001

  # Product Service
  - type: web
    name: cn334-product-service
    env: docker
    dockerfilePath: ./product_service/Dockerfile
    envVars:
      - key: NODE_ENV
        value: production
      - key: PORT
        value: 3002

  # App Service
  - type: web  # หรือ type อื่นที่เหมาะสมสำหรับ service หลักใน docker-compose ของคุณ
    name: cn334-app # ชื่อ service บน Render
    runtime: docker # ระบุ runtime เป็น docker
    # dockerContext: . # (ถ้า docker-compose.yml อยู่ใน root ก็ไม่จำเป็นต้องใส่)
    # Render จะหา docker-compose.yml ใน context นี้โดยอัตโนมัติ
    # และจะ deploy services ทั้งหมดที่นิยามไว้ใน docker-compose.yml
    envVars: # Environment Variables เหล่านี้สามารถส่งต่อไปยัง services ใน docker-compose.yml ได้
      - key: NODE_ENV
        value: production
      - key: NEXT_PUBLIC_API_URL
        value: https://cn334-app.onrender.com # หรือตัวแปรอื่นๆ ที่จำเป็น
    # คุณอาจจะต้องตั้งค่าเพิ่มเติม เช่น health check route หรือ port
    # โดยอ้างอิงจาก service หลักใน docker-compose.yml ของคุณ
